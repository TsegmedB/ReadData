close 'all';
clear 'all'
in_dir = uigetdir('d:\Work\SV-2020\MMB\','Open Directory of the Data');
cd(in_dir);
path = in_dir;
Dat_files = dir('*DHZ.dat');
Num_files = size(Dat_files,1);
file1 = Dat_files(1).name;
disp(Num_files);

sdaily = [path '\daily\'];
stemp = isfolder(sdaily);
if stemp ==0
    mkdir(sdaily);  %daily_av
end

%ene comment nemsen kdjlfjdf
%ene comment nemsen kdjlfjdf
smonth = [path '\monthly\'];
stemp = isfolder(smonth);
if stemp ==0
    mkdir(smonth);  %daily_av
end

for ifile = 1:2 %Num_files
    IAGA_f = Dat_files(ifile).name;
    kfile=length(IAGA_f);
    fn_s = [path '\' IAGA_f];
    fid_s=fopen(fn_s,'r');
    if fid_s==-1
        error(['Can not open file: ' fid_s]);
    end
    disp(fn_s);
%% Import data from text file.
% Script for importing data from the following text file:
%
%    F:\MMB\2020-2022_DHZ.dat
%
% To extend the code to different selected data or a different text file, generate a function instead of a script.

% Auto-generated by MATLAB on 2023/02/15 17:59:03

%% Initialize variables.
filename = fn_s;   %'e:\MMB\1960-1969_DHZ.dat';

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%10s%13s%4s%13s%10s%10s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this code. If an error occurs for a different file, try regenerating the code from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', '', 'WhiteSpace', '', 'TextType', 'string',  'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[3,4,5,6,7]
    % Converts text in the input cell array to numbers. Replaced non-numeric text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1)
        % Create a regular expression to detect and remove non-numeric prefixes and suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData(row), regexstr, 'names');
            numbers = result.numbers;

            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if numbers.contains(',')
                thousandsRegExp = '^[-/+]*\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'))
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator
                numbers = textscan(char(strrep(numbers, ',', '')), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch
            raw{row, col} = rawData{row};
        end
    end
end

% Convert the contents of columns with dates to MATLAB datetimes using the specified date format.
try
    dates{1} = datetime(dataArray{1}, 'Format', 'yyyy-MM-dd', 'InputFormat', 'yyyy-MM-dd');
catch
    try
        % Handle dates surrounded by quotes
        dataArray{1} = cellfun(@(x) x(2:end-1), dataArray{1}, 'UniformOutput', false);
        dates{1} = datetime(dataArray{1}, 'Format', 'yyyy-MM-dd', 'InputFormat', 'yyyy-MM-dd');
    catch
        dates{1} = repmat(datetime([NaN NaN NaN]), size(dataArray{1}));
    end
end

anyBlankDates = dataArray{1} == '';
anyInvalidDates = isnan(dates{1}.Hour) - anyBlankDates;
dates = dates(:,1);

%% Split data into numeric and string columns.
rawNumericColumns = raw(:, [3,4,5,6,7]);
rawStringColumns = string(raw(:, 2));


%% Exclude rows with non-numeric cells
I = ~all(cellfun(@(x) (isnumeric(x) || islogical(x)) && ~isnan(x),rawNumericColumns),2);  %Find rows with non-numeric cells
K = I | anyInvalidDates | anyBlankDates;
dates = cellfun(@(x) x(~K,:), dates, 'UniformOutput', false);
rawNumericColumns(K,:) = [];
rawStringColumns(K,:) = [];

%% Make sure any text containing <undefined> is properly converted to an <undefined> categorical
idx = (rawStringColumns(:, 1) == "<undefined>");
rawStringColumns(idx, 1) = "";

%% Create output variable
DHZ = table;
DHZ.DATE = dates{:, 1};
DHZ.TIME = categorical(rawStringColumns(:, 1));
DHZ.DOY = cell2mat(rawNumericColumns(:, 1));
DHZ.MMBD = cell2mat(rawNumericColumns(:, 2));
DHZ.MMBH = cell2mat(rawNumericColumns(:, 3));
DHZ.MMBZ = cell2mat(rawNumericColumns(:, 4));
DHZ.MMBF = cell2mat(rawNumericColumns(:, 5));
% For code requiring serial dates (datenum) instead of datetime, uncomment the following line(s) below to return the imported dates as datenum(s).
% DHZ.DATE=datenum(DHZ.DATE);

%% Clear temporary variables
clearvars filename formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp dates blankDates anyBlankDates invalidDates anyInvalidDates rawNumericColumns rawStringColumns I J K idx;
 %% Daily mean
% % Make a datetime vector
% Make a datetime vector
DHZ.DATE = datetime(DHZ{:,1},'InputFormat','yyyy.MM.dd.');
DHZ.TIME = DHZ{:,2};
DHZ.Time = DHZ.DATE;
DHZ(:,1:2) = [];
format short
TT = table2timetable(DHZ);
TTdailyMean = retime(TT,'daily','mean');
TTmonthlyMean = retime(TT,'monthly','mean');

%% write monthly average
  fileStrom = [smonth '\' IAGA_f(1:end-8) '_Monthly.txt' ];
 fid_stData = fopen(fileStrom,'w');
%  fprintf(fid_stData, 'Date         Val_D   Val_H   Val_Z \r\n');
   fprintf(fid_stData, '      Date     D      H      Z \r\n');
 for k=1:numel(TTmonthlyMean.Time)
     fprintf(fid_stData,'%10s %6.1f %7.0f %7.0f \r\n',char(TTmonthlyMean.Time(k)), TTmonthlyMean.MMBD(k),TTmonthlyMean.MMBH(k),TTmonthlyMean.MMBZ(k));
 end
 
 %% write daily
 fileStr = [sdaily '\' IAGA_f(1:end-8) '_daily.txt' ];
 fid_stDat=fopen(fileStr,'w'); 
%  fprintf(fid_stDat, 'Date         Val_D   Val_H   Val_Z \r\n');
   fprintf(fid_stDat, '      Date      D       H       Z\r\n');
 for dk=1:numel(TTdailyMean.Time)
     fprintf(fid_stDat,'%10s %6.1f %7.0f %7.0f \r\n',char(TTdailyMean.Time(dk)), TTdailyMean.MMBD(dk),TTdailyMean.MMBH(dk),TTdailyMean.MMBZ(dk));
 end
end
 fclose ('all');
